From b90094e71ab60af87a89b47cbbcf9c5fc0f7075c Mon Sep 17 00:00:00 2001
From: Mei Lei <lei.mei@intel.com>
Date: Mon, 7 Dec 2020 17:12:38 +0000
Subject: [PATCH] Upstream-Status: Pending

The CC variable,sometimes like:"x86_64-poky-linux-gcc   -m64 --sysroot=/${TMPDIR}/sysroots/qemux86-64", contains option information.
This will lead to wrong compiler name "qemux86-64" rather than "x86_64-poky-linux-gcc" when python finding the compiler name.

Secondly add -L=<path> this way linker will be able to resolve /usr/lib w.r.t sysroot and not
use hardcoded /usr/lib to look for libs which is wrong in cross compile environment and this will work
ok on native systems too since sysroot for native compilers is /

Signed-off-by: Mei Lei <lei.mei@intel.com>
Signed-off-by: Khem Raj <raj.khem@gmail.com>

---
 Lib/distutils/unixccompiler.py | 6 ++++--
 1 file changed, 4 insertions(+), 2 deletions(-)

diff --git a/Lib/distutils/unixccompiler.py b/Lib/distutils/unixccompiler.py
index 094a2f0..0f915b7 100644
--- a/Lib/distutils/unixccompiler.py
+++ b/Lib/distutils/unixccompiler.py
@@ -202,7 +202,9 @@ class UnixCCompiler(CCompiler):
     # ccompiler.py.
 
     def library_dir_option(self, dir):
-        return "-L" + dir
+        if dir.startswith("."):
+            return "-L" + dir
+        return "-L=" + dir
 
     def _is_gcc(self, compiler_name):
         return "gcc" in compiler_name or "g++" in compiler_name
@@ -221,7 +223,7 @@ class UnixCCompiler(CCompiler):
         # this time, there's no way to determine this information from
         # the configuration data stored in the Python installation, so
         # we use this hack.
-        compiler = os.path.basename(sysconfig.get_config_var("CC"))
+        compiler = sysconfig.get_config_var("CC")
         if sys.platform[:6] == "darwin":
             # MacOSX's linker doesn't understand the -R flag at all
             return "-L" + dir
